/**
* IOSYS Module <Plug-ins>
* @author leedan, www.iosys.co.kr
* @since 2010.07.05
* @update 2012.12.12
* @version 1.2.0 alpha
*/
(function ($) {
	/**
	* Scroll To
	* <code> $("#id").ScrollTo(...); </code>
	* @add leedan, 2012-07-05
	* @url http://balupton.github.com/jquery-scrollto/demo/
	*/
	/*
	(function (k, l) {
		var d, g; d = k.jQuery; g = d.ScrollTo = d.ScrollTo || { config: { duration: 400, easing: "swing", callback: l, durationMode: "each", offsetTop: 0, offsetLeft: 0 }, configure: function (e) { d.extend(g.config, e || {}); return this; }, scroll: function (e, c) {
			var a, b, f, h, i, j; a = e.pop(); b = a.$container; f = a.$target; a = d("<span/>").css({ position: "absolute", top: "0px", left: "0px" }); h = b.css("position"); b.css("position", "relative"); a.appendTo(b); i = a.offset().top; i = f.offset().top - i - parseInt(c.offsetTop, 10); j = a.offset().left; f = f.offset().left -
j - parseInt(c.offsetLeft, 10); a.remove(); b.css("position", h); b.animate({ scrollTop: i + "px", scrollLeft: f + "px" }, c.duration, c.easing, function (a) { 0 === e.length ? "function" === typeof c.callback && c.callback.apply(this, [a]) : g.scroll(e, c); return !0; }); return !0;
		}, fn: function (e) {
			var c, a, b; c = []; var f = d(this); if (0 === f.length) return this; e = d.extend({}, g.config, e); a = f.parent(); for (b = a.get(0); 1 === a.length && b !== document.body && b !== document; ) {
				var h; h = "visible" !== a.css("overflow-y") && b.scrollHeight !== b.clientHeight; b = "visible" !==
a.css("overflow-x") && b.scrollWidth !== b.clientWidth; if (h || b) c.push({ $container: a, $target: f }), f = a; a = a.parent(); b = a.get(0);
			} c.push({ $container: d(d.browser.msie || d.browser.mozilla ? "html" : "body"), $target: f }); "all" === e.durationMode && (e.duration /= c.length); g.scroll(c, e); return this;
		}
		}; d.fn.ScrollTo = d.ScrollTo.fn;
	})(window);
*/
	
	$.fn.serializeObject = function()
	{
	   var o = {};
	   var a = this.serializeArray();
	   $.each(a, function() {
	       if (o[this.name]) {
	           if (!o[this.name].push) {
	               o[this.name] = [o[this.name]];
	           }
	           o[this.name].push(this.value || '');
	       } else {
	           o[this.name] = this.value || '';
	       }
	   });
	   return o;
	};
	
	/**
	* center
	* <code> $("#id").center(); </code>
	* @add leedan, 2012-07-30
	*/
	$.fn.center = function (parent) {
		if (parent) {
			parent = this.parent();
		} else {
			parent = window;
		}
		this.css({
			"position": "absolute",
			"top": ((($(parent).height() - this.outerHeight()) / 2) + $(parent).scrollTop() + "px"),
			"left": ((($(parent).width() - this.outerWidth()) / 2) + $(parent).scrollLeft() + "px")
		});
		return this;
	};

	/**
	* jQuery-UI <datepicker>
	* <code> $("input.date").datepicker(); </code>
	* <code> $("input.date").datepicker({ dateFormat: 'yymmdd', showButtonPanel: false, changeMonth: false, changeYear: false }); </code>
	* @author leedan
	* @since 2010.07.16
	*/
	//*iosys.define.jquery.plugins("datepicker",["jquery.ui.core","jquery.ui.datepicker"],["jquery.ui.iosys"],"plugins/jqueryui/",function(){
	$.datepicker.setDefaults({
		closeText: '닫기',
		currentText: '오늘',
		prevText: '이전달',
		nextText: '다음달',
		//monthNames: ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월'],
		//monthNamesShort: ['1월','2월','3월','4월','5월','6월','7월','8월','9월','10월','11월','12월'],
		monthNamesShort: ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12'],
		dayNames: ['일', '월', '화', '수', '목', '금', '토'],

		dayNamesShort: ['일', '월', '화', '수', '목', '금', '토'],
		dayNamesMin: ['일', '월', '화', '수', '목', '금', '토'],
		dateFormat: 'yy.mm.dd',
		firstDay: 0,
		isRTL: false,
		showMonthAfterYear: true,
		yearSuffix: ' ',
		changeMonth: true, changeYear: true,
		showButtonPanel: true,
		//weekHeader: '주', showWeek: true, firstDay: 1,
		//showOn: 'button', buttonImage: iosys.root + 'iosys/jqueryui/images/icon_calendar.gif', buttonImageOnly: true, // 아이콘 중앙정렬이 되지 않음 -_-;
		showAnim: ''
	});
	//}); //*/

})(jQuery);

/**
 * jquery-html5-placeholder-shim
 * @param $
 */
(function($) {
	// @todo Document this.
	$.extend($,{ placeholder: {
		browser_supported: function() {
			return this._supported !== undefined ?
					this._supported :
						( this._supported = !!('placeholder' in $('<input type="text">')[0]) );
		},
		shim: function(opts) {
			var config = {
					color: '#888',
					cls: 'placeholder',
					selector: 'input[placeholder], textarea[placeholder]'
			};
			$.extend(config,opts);
			return !this.browser_supported() && $(config.selector)._placeholder_shim(config);
		}
	}});

	$.extend($.fn,{
		_placeholder_shim: function(config) {
			function calcPositionCss(target)
			{
				var op = $(target).offsetParent().offset();
				var ot = $(target).offset();

				return {
					top: ot.top - op.top,
					left: ot.left - op.left,
					width: $(target).width()
				};
			}
			function adjustToResizing(label) {
				var $target = label.data('target');
				if(typeof $target !== "undefined") {
					label.css(calcPositionCss($target));
					$(window).one("resize", function () { adjustToResizing(label); });
				}
			}
			return this.each(function() {
				var $this = $(this);

				if( $this.is(':visible') ) {

					if( $this.data('placeholder') ) {
						var $ol = $this.data('placeholder');
						$ol.css(calcPositionCss($this));
						return true;
					}

					var possible_line_height = {};
					if( !$this.is('textarea') && $this.css('height') != 'auto') {
						possible_line_height = { lineHeight: $this.css('height'), whiteSpace: 'nowrap' };
					}

					var isBorderBox = ($this.css('box-sizing') === 'border-box');
					var isTextarea = $this.is('textarea');

					var ol = $('<label />')
					.text($this.attr('placeholder'))
					.addClass(config.cls)
					.css($.extend({
						position:'absolute',
						display: 'inline',
						'float':'none',
						overflow:'hidden',
						textAlign: 'left',
						color: config.color,
						cursor: 'text',
						paddingTop: !isTextarea && isBorderBox ? '0' : $this.css('padding-top'),
								paddingRight: $this.css('padding-right'),
								paddingBottom: !isTextarea && isBorderBox ? '0' : $this.css('padding-bottom'),
										paddingLeft: $this.css('padding-left'),
										fontSize: $this.css('font-size'),
										fontFamily: $this.css('font-family'),
										fontStyle: $this.css('font-style'),
										fontWeight: $this.css('font-weight'),
										textTransform: $this.css('text-transform'),
										backgroundColor: 'transparent',
										zIndex: 99
					}, possible_line_height))
					.css(calcPositionCss(this))
					.attr('for', this.id)
					.data('target',$this)
					.click(function(){
						if (!$(this).data('target').is(':disabled')) {
							$(this).data('target').focus();
						}
					})
					.insertBefore(this);
					$this
					.data('placeholder', ol)
					.on('keydown', function () {
						ol.hide();
					})
					.on('blur change', function () {
						ol[$this.val().length ? 'hide' : 'show']();
					})
					.triggerHandler('blur');
					$(window).one("resize", function () { adjustToResizing(ol); });
				}
			});
		}
	});
})(jQuery);

jQuery(document).add(window).bind('ready load', function() {
	if (jQuery.placeholder) {
		jQuery.placeholder.shim();
	}
});

/**
 * JQuery Print 오버라이딩 함수 
 * created 2015.12.01
 * updated 2017.02.01
 */
 
/** 사용법  
	$('#print_content_container').print({
		globalStyles: true,							// 기존 CSS 사용 여부 
		mediaPrint: false,							// audio,video tag 프린트 여부
		stylesheet: null,							// external css 사용 여부
		noPrintSelector: ".no-print",				// 프린트 안할 element에 붙이는 클래스 태그명
		iframe: true,								// iframe에 내용 복사 후 프린트를 하는지 여부
		timeout: 10,								// timeout 시간 (ms)
		manuallyCopyFormValues: true,				// copy by value 여부
		deferred: $.Deferred(),
		doctype: '<!doctype html>'
	});
 */
 
 
(function ($) {
    "use strict";
    function getjQueryObject(string) {
        var jqObj = $("");
        try {
            jqObj = $(string)
                .clone();
        } catch (e) {
            jqObj = $("<span />")
                .html(string);
        }
        return jqObj;
    }

    function printFrame(frameWindow, content, options) {
        var def = $.Deferred();
        try {
            frameWindow = frameWindow.contentWindow || frameWindow.contentDocument || frameWindow;
            var wdoc = frameWindow.document || frameWindow.contentDocument || frameWindow;
            if(options.doctype) {
                wdoc.write(options.doctype);
            }
            wdoc.write(content);
            wdoc.close();
            setTimeout(function () {
                frameWindow.focus();
                try {
                    if (!frameWindow.document.execCommand('print', false, null)) {
                        frameWindow.print();
                    }
                } catch (e) {
                    frameWindow.print();
                }
                frameWindow.close();
                def.resolve();
            }, options.timeout);
        } catch (err) {
            def.reject(err);
        }
        return def;
    }

    function printContentInIFrame(content, options) {
        var $iframe = $(options.iframe + "");
        var iframeCount = $iframe.length;
        if (iframeCount === 0) {
            $iframe = $('<iframe height="0" width="0" border="0" wmode="Opaque"/>')
                .prependTo('body')
                .css({
                    "position": "absolute",
                    "top": -999,
                    "left": -999
                });
        }
        var frameWindow = $iframe.get(0);
        return printFrame(frameWindow, content, options)
            .done(function () {
                setTimeout(function () {
                    if (iframeCount === 0) {
                        $iframe.remove();
                    }
                }, 100);
            })
            .fail(function (err) {
                console.error("Failed to print from iframe", err);
                printContentInNewWindow(content, options);
            })
            .always(function () {
                try {
                    options.deferred.resolve();
                } catch (err) {
                    console.warn('Error notifying deferred', err);
                }
            });
    }

    function printContentInNewWindow(content, options) {
        var frameWindow = window.open();
        return printFrame(frameWindow, content, options)
            .always(function () {
                try {
                    options.deferred.resolve();
                } catch (err) {
                    console.warn('Error notifying deferred', err);
                }
            });
    }

    function isNode(o) {
        return !!(typeof Node === "object" ? o instanceof Node : o && typeof o === "object" && typeof o.nodeType === "number" && typeof o.nodeName === "string");
    }
	
    $.print = $.fn.print = function () {
        var options, $this, self = this;
        if (self instanceof $) {
            self = self.get(0);
        }
        if (isNode(self)) {
            $this = $(self);
            if (arguments.length > 0) {
                options = arguments[0];
            }
        } else {
            if (arguments.length > 0) {
                $this = $(arguments[0]);
                if (isNode($this[0])) {
                    if (arguments.length > 1) {
                        options = arguments[1];
                    }
                } else {
                    options = arguments[0];
                    $this = $("html");
                }
            } else {
                $this = $("html");
            }
        }
        var defaults = {
            globalStyles: true,
            mediaPrint: false,
            stylesheet: null,
            noPrintSelector: ".no-print",
            iframe: true,
            append: null,
            prepend: null,
            manuallyCopyFormValues: true,
            deferred: $.Deferred(),
            timeout: 250,
            title: null,
            doctype: '<!doctype html>'
        };
        options = $.extend({}, defaults, (options || {}));
        var $styles = $("");
		
        if (options.globalStyles) {
            $styles = $("style, link, meta, base, title");
        } else if (options.mediaPrint) {
            $styles = $("link[media=print]");
        }
		
        if (options.stylesheet) {
            $styles = $.merge($styles, $('<link rel="stylesheet" href="' + options.stylesheet + '">'));
        }
        var copy = $this.clone();
        copy = $("<span/>")
            .append(copy);
        copy.find(options.noPrintSelector)
            .remove();
        copy.append($styles.clone());
		
        if (options.title) {
            var title = $("title", copy);
			
            if (title.length === 0) {
                title = $("<title />");
                copy.append(title);
            }
			
            title.text(options.title);
        }
        copy.append(getjQueryObject(options.append));
        copy.prepend(getjQueryObject(options.prepend));
		
        if (options.manuallyCopyFormValues) {
            copy.find("input")
                .each(function () {
                    var $field = $(this);
					
                    if ($field.is("[type='radio']") || $field.is("[type='checkbox']")) {
                        if ($field.prop("checked")) {
                            $field.attr("checked", "checked");
                        }
                    } else {
                        $field.attr("value", $field.val());
                    }
                });
            copy.find("select").each(function () {
                var $field = $(this);
                $field.find(":selected").attr("selected", "selected");
            });
            copy.find("textarea").each(function () {
                var $field = $(this);
                $field.text($field.val());
            });
        }
        var content = copy.html();
		
        try {
            options.deferred.notify('generated_markup', content, copy);
        } catch (err) {
            console.warn('Error notifying deferred', err);
        }
		
        copy.remove();
		
        if (options.iframe) {
            try {
                printContentInIFrame(content, options);
            } catch (e) {
                console.error("Failed to print from iframe", e.stack, e.message);
                printContentInNewWindow(content, options);
            }
        } else {
            printContentInNewWindow(content, options);
        }
		
        return this;
    };
})(jQuery);